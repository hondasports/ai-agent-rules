---
description:
globs: *.ts,*.js,*.vue
alwaysApply: false
---
### グローバル
* 関数、変数、クラスなどにはJSDOCで簡潔なコメントを書いてください。コードの可読性向上とAgentでの動作の手助けになることを目的としています。

## Vue 3 コンポーネント設計
* データとUIを分離するためにContainer/Presentationalパターンを使用してください。
* Vue3の`defineModel`などの最新の構文は、積極的に採用してください。

## ライブラリ・ツール

### vee-validate
* `useField`は`const`で宣言してください。
* カスタムルールには`is`プレフィックス (例: `isRequired`) を使用してください。
* `zod`スキーマの利用を検討してください。

### Zod
* 型推論には`z.satisfies`を活用し、型とzodスキーマを結びつけて下さい。
* APIレスポンスやフォームデータの型定義に積極的に利用してください。
* バックエンドとのデータ構造の契約として活用してください。

### Vite
* Pluginを作成する場合において、モードなど設定ファイルを取得する場合は、Pluginクラスの流儀にしたがってください。

### vitestを用いたユニットテスト戦略
* 基本方針は、行カバレッジ70-80%を目指しつつ、分岐が多い複雑な箇所については、特に重要なパスの分岐カバレッジを担保する。
* 具体的な数値目標は以下とします。
  * 行カバレッジ (Line Coverage): 70% - 80%
  * 分岐カバレッジ (Branch Coverage): 50% - 60% (テスト対象の中核となる重要な箇所に絞る)
* テストコマンドは、pnpm test:unit を用いて下さい。

### CSS
* 基本スタイリングはTailwindクラスを優先
* 複雑なスタイルは@applyでTailwindユーティリティ適用
* Framework7変数は--f7-プレフィックスで上書き
* コンポーネント固有のスタイルは必ずscoped属性を使用
* BEMライクな命名規則（.component-name__element--modifier）

## その他
* エラー処理として、非同期操作にはtry-catchブロックを実装し、ユーザーフレンドリーなエラーメッセージを提供してください。
* 実行コマンドは、pnpmを用いてください。ユニットテストの実行、ビルド、開発サーバの立ち上げのコマンドは`package.json`を参照してください。